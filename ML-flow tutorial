{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNz2Q6OkKT7PDjCBeZGERQB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"code","source":["! pip install mlflow"],"metadata":{"id":"N66KcrlA0uew"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"XdT2S88tkK7i","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1673625052685,"user_tz":-330,"elapsed":2640,"user":{"displayName":"Shreyas Karanjkar","userId":"00066937484158918932"}},"outputId":"7fbfc50e-87df-4781-c9ca-84640985ff04"},"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-d8b15d954a71>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mtest_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"quality\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m     \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margv\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m     \u001b[0ml1_ratio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margv\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: '-f'"]}],"source":["# The data set used in this example is from http://archive.ics.uci.edu/ml/datasets/Wine+Quality\n","# P. Cortez, A. Cerdeira, F. Almeida, T. Matos and J. Reis.\n","# Modeling wine preferences by data mining from physicochemical properties. In Decision Support Systems, Elsevier, 47(4):547-553, 2009.\n","\n","import os\n","import warnings\n","import sys\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import ElasticNet\n","from urllib.parse import urlparse\n","import mlflow\n","import mlflow.sklearn\n","\n","import logging\n","\n","logging.basicConfig(level=logging.WARN)\n","logger = logging.getLogger(__name__)\n","\n","\n","def eval_metrics(actual, pred):\n","    rmse = np.sqrt(mean_squared_error(actual, pred))\n","    mae = mean_absolute_error(actual, pred)\n","    r2 = r2_score(actual, pred)\n","    return rmse, mae, r2\n","\n","\n","if __name__ == \"__main__\":\n","    warnings.filterwarnings(\"ignore\")\n","    np.random.seed(40)\n","\n","    # Read the wine-quality csv file from the URL\n","    csv_url = (\n","        \"https://raw.githubusercontent.com/mlflow/mlflow/master/tests/data/winequality-red.csv\"\n","    )\n","    try:\n","        data = pd.read_csv(csv_url, sep=\";\")\n","    except Exception as e:\n","        logger.exception(\n","            \"Unable to download training & test CSV, check your internet connection. Error: %s\", e\n","        )\n","\n","    # Split the data into training and test sets. (0.75, 0.25) split.\n","    train, test = train_test_split(data)\n","\n","    # The predicted column is \"quality\" which is a scalar from [3, 9]\n","    train_x = train.drop([\"quality\"], axis=1)\n","    test_x = test.drop([\"quality\"], axis=1)\n","    train_y = train[[\"quality\"]]\n","    test_y = test[[\"quality\"]]\n","\n","    alpha = float(sys.argv[1]) if len(sys.argv) > 1 else 0.5\n","    l1_ratio = float(sys.argv[2]) if len(sys.argv) > 2 else 0.5\n","\n","    with mlflow.start_run():\n","        lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n","        lr.fit(train_x, train_y)\n","\n","        predicted_qualities = lr.predict(test_x)\n","\n","        (rmse, mae, r2) = eval_metrics(test_y, predicted_qualities)\n","\n","        print(\"Elasticnet model (alpha={:f}, l1_ratio={:f}):\".format(alpha, l1_ratio))\n","        print(\"  RMSE: %s\" % rmse)\n","        print(\"  MAE: %s\" % mae)\n","        print(\"  R2: %s\" % r2)\n","\n","        mlflow.log_param(\"alpha\", alpha)\n","        mlflow.log_param(\"l1_ratio\", l1_ratio)\n","        mlflow.log_metric(\"rmse\", rmse)\n","        mlflow.log_metric(\"r2\", r2)\n","        mlflow.log_metric(\"mae\", mae)\n","\n","        tracking_url_type_store = urlparse(mlflow.get_tracking_uri()).scheme\n","\n","        # Model registry does not work with file store\n","        if tracking_url_type_store != \"file\":\n","\n","            # Register the model\n","            # There are other ways to use the Model Registry, which depends on the use case,\n","            # please refer to the doc for more information:\n","            # https://mlflow.org/docs/latest/model-registry.html#api-workflow\n","            mlflow.sklearn.log_model(lr, \"model\", registered_model_name=\"ElasticnetWineModel\")\n","        else:\n","            mlflow.sklearn.log_model(lr, \"model\")"]}]}